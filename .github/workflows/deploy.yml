name: Deploy

on:
  push:
    branches:
    - main

permissions:
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: deploy
    steps:
    - uses: actions/checkout@v4

    - name: Set up GHC and cabal
      uses: haskell/actions/setup@v2
      id: setup
      with:
        ghc-version: '9.4.8'
        cabal-version: '3.10.3'
        cabal-update: true

    - name: Set GHC and Cabal versions in ENV
      shell: bash
      run: |
        GHC_VERSION=$(ghc --numeric-version)
        CABAL_VERSION=$(cabal --numeric-version)
        echo "GHC_VERSION=${GHC_VERSION}"     >> "${GITHUB_ENV}"
        echo "CABAL_VERSION=${CABAL_VERSION}" >> "${GITHUB_ENV}"

    - name: Configure the build
      run: |
        cabal configure --enable-tests --enable-benchmarks --disable-documentation
        cabal build --dry-run

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      id: cache
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ runner.os }}-ghc-${{ env.GHC_VERSION }}-cabal-${{ env.CABAL_VERSION }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: |
          ${{ runner.os }}-ghc-${{ env.GHC_VERSION }}-cabal-${{ env.CABAL_VERSION }}-

    - name: Install dependencies
      run: cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v3
      # Caches are immutable, trying to save with the same key would error.
      if: ${{ !steps.cache.outputs.cache-hit
        || steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}      

    - name: Build
      run: cabal build all

    - name: Run tests
      run: cabal test all

    - name: Run site build
      run: cabal run site -- build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy
      shell: bash
      env:
        CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        ./scripts/deploy
